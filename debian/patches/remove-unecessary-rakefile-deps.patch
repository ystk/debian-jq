Description: patch Rakefile to allow for easier manpage generation
 This patch disable some of the dependencies that are not
 required to build the actual manpage.
Author: Simon Elsbrock
Bug: https://github.com/stedolan/jq/issues/435
Last-Update: 2014-06-21
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: jq/docs/Rakefile
===================================================================
--- jq.orig/docs/Rakefile	2015-10-11 02:08:20.982763007 +0200
+++ jq/docs/Rakefile	2015-10-11 02:08:20.978763007 +0200
@@ -1,91 +1,9 @@
 require 'yaml'
-require 'bonsai'
-require 'liquid'
-require 'maruku'
 require 'json'
 require 'ronn'
 require 'tempfile'
 require 'yaml'
 
-module ExtraFilters
-  def markdownify(input)
-    Maruku.new(input).to_html
-  end
-
-  def sanitize(input)
-    input.gsub(/[^a-zA-Z0-9_]/,"")
-  end
-
-  def json(input)
-    input.to_json
-  end
-  
-  def unique(input)
-    @n = (@n || 0) + 1
-    input + @n.to_s
-  end
-end
-
-Liquid::Template.register_filter(ExtraFilters)
-
-
-task :serve do
-  begin
-    Bonsai.log "Press Control+C to quit"
-    
-    require 'rack'
-    require 'sinatra'
-    require 'watch'
-    require 'launchy'
-    
-    Bonsai.root_dir = Dir.pwd
-    
-    server = fork {        
-      app = Rack::Builder.app {
-        map "/jq" do
-          use Bonsai::StaticPassThrough, :root => Bonsai.root_dir + "/output", :urls => ["/"]
-        end
-        run Bonsai::DevelopmentServer
-      }
-      Rack::Handler.default.run(app, :Port => 5000) do
-        Launchy.open("http://localhost:5000/jq/")
-      end
-    }    
-    Watch.new("{content,templates,public}/**/*") { Bonsai::Exporter.process! }
-  rescue Interrupt
-    Process.kill("QUIT", server)
-    Process.wait(server)
-    exit
-  end
-end
-
-task :build do
-  Bonsai.root_dir = Dir.pwd
-  Bonsai::Exporter.publish!
-end
-
-$BINARIES = {
-  :osx32 => "--host=i686-apple-darwin10 CFLAGS='-m32 -g -O'",
-  :osx64 => "--host=i686-apple-darwin10 CFLAGS='-m64 -g -O'",
-  :win32 => "--host=i686-w64-mingw32 CFLAGS='-g -O'",
-  :win64 => "--host=x86_64-w64-mingw32 CFLAGS='-g -O'",
-  :linux32 => "--host=x86_64-linux-gnu CFLAGS='-m32 -g -O'",
-  :linux64 => "--host=x86_64-linux-gnu CFLAGS='-m64 -g -O'"
-}
-
-$BINARIES.each do |name, args|
-  file "../build/#{name}" do |t|
-    sh "../scripts/crosscompile -j4 #{name} #{args}"
-  end
-  task :binaries => ["../build/#{name}"]
-end
-
-task :binaries => ["output/download"] do
-  $BINARIES.each do |name, args|
-    FileUtils.cp_r "../build/#{name}", "output/download/"
-  end
-end
-
 def load_manual
   YAML::load(File.open("content/3.manual/manual.yml"))
 end
